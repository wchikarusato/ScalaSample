やってみように従ってやればとりあえず基本的なことは網羅できそう
https://qiita.com/f81@github/items/369d3ad97112b20d9bc5


# インストール
- Javaとscalaを入れる。Scalaのurlは以下
  一番下のscala-2.12.3.msiを落とすこと。sbtとかはとりあえず無視
  http://www.scala-lang.org/
  環境変数を設定する
  JAVA_HOME
    JAVA_HOME=C:\Program Files\Java\jdk1.7.0_21
  SCALA_HOME
    SCALA_HOME=C:\Program Files\scala

# HelloWorld
  以下の記事に従って.scalaを作る
  https://qiita.com/f81@github/items/8d67fb3f211fb3e149db

object HelloWorld {
  def main(args: Array[String]){
    if(args.size == 0) {
      val strs = Array("Hello", "World")
          output(strs)
    } else {
          printf("Invalid args.")
    }
  }

  def output(strs: Array[String]):Unit = {
    for(str <- strs) {
      printf("%s ", str)
    }
  }
}

### 解説
- object HelloWorld でシングルトンオブジェクトを作る。
  (mainメソッドに複数のインスタンスは必要ないのでシングルトン)
  実行の起点となるお約束の構文
  object オブジェクト{
    def main(args: Array[String]): Unit = {
      処理
    }
  }
  // : Unit = は省略可。Unitは戻り値がない場合の宣言(voidと同じ
  
- if,elseはおなじみ
  上のサンプルではコマンドライン引数に値があればinvalidを出力する
- def メソッドの宣言 まあrubyでもおなじみ
  ただ、戻り値の型の宣言が独特
  def メソッド名(引数リスト): メソッドの戻り値の型 = {}
- for for(str <- strs) {・・・}で 拡張forループ
  <-がポインタに見えるのは気のせいだろうか....
- print関数
  printf("%s ", str) で%sをstrで置換
- val 変数名 = 値 でイミュータブルになる。javaのstatic finalと同じ
  var で対義語のミュータブル。こっちは値を変えれる
- foreach 引数に関数を渡す事ができる
  strs.foreach(printf("%s", _))
  _が strs配列の要素を渡すので上のサンプルのforがごっそり置き換えれる


#  関数型宣言ってなに
https://qiita.com/f81@github/items/9f0b9cc5c0f28deb48e2


### 解説
  var add = (x:Int) => {
    total+=x
    total
  }
  xを引数にしてtotalに足す。totalを戻り値として返す

  var calculate = (x: Int) => x + 5 : Int
  引数を渡すと5足して返す

-  関数は自動的にイミュータブルになるから同じ宣言をする事ができない(やる場合はオーバーロードする?
- 副作用がない。calculateファンクション内でスコープは完結してる。呼び出す度に前の値まで増える事はない
- メソッドだけをオブジェクトとして返せる
  上のサンプルを以下にも書ける
  val add = (x: Int) => {
    val _add = (y: Int) =>  y + 5
    _add(x)
  }
  戻り値を _add 型にしてるのがメソッドをオブジェクトして返せるという意味


#  クロージャー
  Javascriptおなじみ。javaでは書けないけど、scalaだと書ける。Scala利点の一つ?

### 解説
  関数の中に関数があった時に身元不明の変数を宣言なしで使えること
  function outer() {
    var x = 10;
    function inner() {
        alert(x)
        x = x + 1
    }
    return inner;
  }
  上の xを宣言なしで使ってるinner関数がクロージャー。
  inner closes over x. -> closes over -> クロージャー わかりづれえ
  以下の場合に使うらしい
  
- グローバル変数をなるべく減らしたい
- 自由度の高い関数を生成したい
- 呼び出して実行した結果を内部で保存して、次呼び出した時に前回の結果使いたいとき
  (アクセスカウンターがこのパターン


# Scalaのオブジェクト指向
class User(val id: Long, val firstname: String, val lastname: String) {
  def getFullname() = this.firstname + " " +  this.lastname
}

### 解説
よくあるUserクラスにid,nameのフィールドがあってget,setでとってくるやつ

- 引数の val(またはvar)がそのままフィールドになる
  なので記述がかなり省略できる
- valなのでインスタンス.フィールドでアクセスできる
  class User(private val id: Long,  ... で直アクセスできない様にする事も可



------------- 未分類メモ ------------------------

# Scalaとは
  JVM上で動作するJavaとは別の関数型言語。よってScala独自のお作法を知る必要がある。
  ただ、JVM上で動かしてるのでJavaで作られたライブラリを動かす事ができる。
  全体的に 変数名: 型 = {オブジェクト} って構文で書く傾向にある
  
# sbtとは
  Scalaのビルとツール

# 関数とメソッドの違い
  メソッドはあくまでオブジェクトと関連づいてる
  関数はあくまで引数に依存する。
  引数が同じなら関数は常に同じ値を返すが、メソッドはフィールド次第で同じ引数を渡しても違う結果が返る

- 関数:funtion 引数を受け取って決められた通りの処理をして結果を返す
  func hoge(a:int, b:int) -> int{
    return a+b
  }

- メソッド:method オブジェクトが持っている自身に対する操作
  class hogeMath {
    static fun hoge(a:int, b:int) -> int{
      return a+b
    }
  }


https://dwango.github.io/scala_text/introduction-to-scala.html


